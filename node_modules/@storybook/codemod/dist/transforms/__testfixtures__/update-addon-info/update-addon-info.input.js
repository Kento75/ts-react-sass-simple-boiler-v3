"use strict";

var _react = _interopRequireDefault(require("react"));

var _Button = _interopRequireDefault(require("./Button"));

var _react2 = require("@storybook/react");

var _addonActions = require("@storybook/addon-actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */
var _ref =
/*#__PURE__*/
_react.default.createElement("br", null);

var _ref2 =
/*#__PURE__*/
_react.default.createElement("p", null, "Click the \"?\" mark at top-right to view the info.");

(0, _react2.storiesOf)('Button').addWithInfo('simple usage', 'This is the basic usage with the button with providing a label to show the text.', () => _react.default.createElement("div", null, _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), _ref, _ref2));
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (inline info)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  inline: true
});
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (disable source)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  source: false,
  inline: true
});
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (no header)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  header: false,
  inline: true
});
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (no prop tables)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  propTables: false,
  inline: true
});

var _ref3 =
/*#__PURE__*/
_react.default.createElement("br", null);

(0, _react2.storiesOf)('Button').addWithInfo('simple usage (custom propTables)', `
      This is the basic usage with the button with providing a label to show the text.
      Since, the story source code is wrapped inside a div, info addon can't figure out propTypes on it's own.
      So, we need to give relevant React component classes manually using \`propTypes\` option as shown below:
      ~~~js
      storiesOf('Button')
        .addWithInfo(
          'simple usage (custom propTables)',
          <info>,
          <storyFn>,
          { inline: true, propTables: [Button]}
        );
      ~~~
    `, () => _react.default.createElement("div", null, _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), _ref3), {
  inline: true,
  propTables: [_Button.default]
});

var _ref4 =
/*#__PURE__*/
_react.default.createElement("br", null);

var _ref5 =
/*#__PURE__*/
_react.default.createElement("p", null, "Click the \"?\" mark at top-right to view the info.");

(0, _react2.storiesOf)('Button').addWithInfo('simple usage (JSX description)', _react.default.createElement("div", null, _react.default.createElement("h2", null, "This is a JSX info section"), _react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ornare massa rutrum metus commodo, a mattis velit dignissim. Fusce vestibulum turpis sed massa egestas pharetra. Sed at libero nulla."), _react.default.createElement("p", null, _react.default.createElement("a", {
  href: "https://github.com/storybookjs/react-storybook-addon-info"
}, "This is a link")), _react.default.createElement("p", null, _react.default.createElement("img", {
  src: "http://placehold.it/350x150"
}))), () => _react.default.createElement("div", null, _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), _ref4, _ref5));
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (inline JSX description)', _react.default.createElement("div", null, _react.default.createElement("h2", null, "This is a JSX info section"), _react.default.createElement("p", null, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ornare massa rutrum metus commodo, a mattis velit dignissim. Fusce vestibulum turpis sed massa egestas pharetra. Sed at libero nulla."), _react.default.createElement("p", null, _react.default.createElement("a", {
  href: "https://github.com/storybookjs/react-storybook-addon-info"
}, "This is a link")), _react.default.createElement("p", null, _react.default.createElement("img", {
  src: "http://placehold.it/350x150"
}))), () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  inline: true
});
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (maxPropsInLine === 1)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  inline: true,
  maxPropsIntoLine: 1
});
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (maxPropObjectKeys === 5)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  object: {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    e: 5,
    f: 6
  }
}), {
  inline: true,
  maxPropObjectKeys: 5
});
(0, _react2.storiesOf)('Button').addWithInfo('simple usage (maxPropArrayLength === 8)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
}), {
  inline: true,
  maxPropArrayLength: 8
});

var _ref6 =
/*#__PURE__*/
_react.default.createElement(_Button.default, {
  label: "The Button",
  string: "1 2 3 4 5 6 7 8"
});

(0, _react2.storiesOf)('Button').addWithInfo('simple usage (maxPropStringLength === 10)', `
      This is the basic usage with the button with providing a label to show the text.
    `, () => _ref6, {
  inline: true,
  maxPropStringLength: 5
});
(0, _react2.storiesOf)('Button').addWithInfo('with custom styles', `
      This is an example of how to customize the styles of the info components.
      For the full styles available, see \`./src/components/Story.js\`
    `, () => _react.default.createElement(_Button.default, {
  label: "The Button",
  onClick: (0, _addonActions.action)('onClick')
}), {
  inline: true,
  styles: stylesheet => {
    stylesheet.infoPage = {
      backgroundColor: '#ccc'
    };
    return stylesheet;
  }
});
(0, _react2.storiesOf)('shared/ProgressBar', module).addDecorator(withKnobs).addWithInfo('default style', () => _react.default.createElement(ProgressBar, {
  progress: number('progress', 25),
  delay: number('delay', 500)
}));